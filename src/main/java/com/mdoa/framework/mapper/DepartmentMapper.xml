<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mdoa.framework.dao.DepartmentDao">
	<!-- 获取UUID -->
	<select id="getuuid" resultType="java.lang.String">
		select uuid() as uuid
	</select>

	<!-- 根据父部门Id查询部门列表 -->
	<select id="getLowerBySuperId" parameterType="com.mdoa.framework.model.DepartmentTree" 
		resultType="com.mdoa.framework.model.DepartmentTree">
		SELECT
			department_id AS thisId,
			url AS id,
			department_name AS text
		FROM
			framework_department
		WHERE
			super_department_id = #{thisId,jdbcType=CHAR}
		AND alive_flag = '1'
		ORDER BY
			create_time DESC
	</select>
	
	<!-- 根据父部门的Url来查询所有的子部门 -->
	<select id="getLowerBySuperUrl" parameterType="java.util.HashMap" 
		resultType="com.mdoa.framework.model.Department">
		SELECT
			department_id as departmentId,
			department_name as departmentName,
			super_department_id as superDepartmentId,
			url AS url,
			create_user_id AS createUserId,
			create_user_name AS createUserName,
			create_time AS createTime,
			update_user_id AS updateUserId,
			update_user_name AS updateUserName,
			update_time AS updateTime,
			alive_flag AS aliveFlag
		FROM
			framework_department
		WHERE
			url LIKE (${url })
			AND alive_flag = '1'
		ORDER BY 
			create_time DESC
	</select>
	
	<!-- 插入部门信息到部门表中 -->
	<insert id="insertDepartment" parameterType="com.mdoa.framework.model.Department">
		INSERT INTO framework_department
		(
			department_id,
			department_name,
			super_department_id,
			url,
			create_user_id,
			create_user_name,
			create_time,
			alive_flag
		) VALUES(
			#{departmentId},
			#{departmentName},
			#{superDepartmentId},
			#{url},
			#{createUserId},
			#{createUserName},
			now(),
			'1'
		)
	</insert>
	
	<!-- 根据部门的筛选信息获取部门的列表 -->
	<select id="getDepartmentList" parameterType="com.mdoa.framework.bo.DepartmentForm" 
		resultType="com.mdoa.framework.model.Department">
		SELECT
			a.department_id AS departmentId,
			a.department_name AS departmentName,
			b.department_name AS superDepartmentName,
			a.url AS url,
			a.create_user_name AS createUserName,
			a.create_time AS createTime,
			DATE_FORMAT(a.create_time,'%Y-%m-%d %H:%i:%s') AS createTimeStr,
			a.update_user_name AS updateUserName,
			a.update_time AS updateTime,
			DATE_FORMAT(a.update_time,'%Y-%m-%d %H:%i:%s') AS updateTimeStr
		FROM
			framework_department a,
			framework_department b
		WHERE
			(
				a.super_department_id = b.department_id
				OR (
					a.super_department_id = '0000'
					AND a.department_id = b.department_id
				)
			)
			AND a.alive_flag = '1'
			AND b.alive_flag = '1'
		<if test="departmentName != null and departmentName != ''">
			AND a.department_name LIKE (${departmentName})
		</if>
		<if test="superDepartmentName != null and superDepartmentName != ''">
			AND b.department_name LIKE (${superDepartmentName})
		</if>
		<if test="createTimeEndStr != null and createTimeEndStr != ''">
			AND a.create_time &lt; str_to_date(#{createTimeEndStr}, '%Y-%m-%d %H')
		</if>
		<if test="createTimeStartStr != null and createTimeStartStr != ''">
			AND a.create_time &gt; str_to_date(#{createTimeStartStr}, '%Y-%m-%d %H')
		</if>
		<if test="sort == null and sort == ''">
		    ORDER BY a.create_time DESC
	    </if>
	    <if test="sort != null and sort != ''">
	    	ORDER BY ${sort} ${order}
	    </if>
		
	</select>
	
	<select id="getUserByDepartment" parameterType="com.mdoa.framework.bo.DepartmentForm" 
		resultType="com.mdoa.user.model.UserInfo">
		SELECT
			user_id AS userId,
		 	user_account AS userAccount,
		 	id_card AS idCard,
			user_name AS userName,
			alive_flag AS aliveFlag,
			department_id AS departmentId
		FROM
			user_info a
		WHERE
			alive_flag = '1'
		<if test="departmentId != null and departmentId != ''">
			AND b.department_id = #{departmentId}
		</if>
		<if test="userName != null and userName != ''">
			AND a.user_name LIKE (${userName})
		</if>
		ORDER BY 
			a.create_time DESC
	</select>
	
	<!-- 删除部门信息 -->
	<update id="deleteDepartment" parameterType="java.util.HashMap">
		UPDATE
			framework_department
		SET
			alive_flag = '0',
			update_user_id = #{userId},
			update_user_name = #{userName},
			update_time = NOW()
		WHERE
			url LIKE (${departmentUrl})
	</update>
	
	<!-- 修改部门名称信息 -->
	<update id="updateDepartmentName" parameterType="java.util.HashMap">
		UPDATE
			framework_department
		SET
			update_user_id = #{userId},
			update_user_name = #{userName},
			update_time = NOW(),
			department_name = #{departmentName}
		WHERE
			department_id = #{departmentId}
			and alive_flag = '1'
	</update>
	<!-- 修改部门名称信息的时候，userInfo表里面关联的部门名称也要修改 -->
	<update id="updateUserDepartmentName" parameterType="java.util.HashMap">
		UPDATE
		 	framework_department b
		LEFT JOIN user_info a ON (
			a.department_url = #{departmentUrl}
		)
		SET
			a.department_name = #{departmentName},
			b.department_name = #{departmentName}
		WHERE
			b.url = #{departmentUrl}
	</update>

	<!-- 根据部门的Url来修改部门的父级Url和父级部门Id -->
	<update id="updateDepartmentUrl" parameterType="java.util.HashMap">
		UPDATE framework_department
		SET
			super_department_id = #{superDeptId},
			url = #{newUrl},
			update_time = NOW(),
			update_user_id = #{updateUserId},
			update_user_name = #{updateUserName}
		WHERE
			url = #{startNodeUrl}
	</update>
	
	<update id="updateChildDepartmentUrl" parameterType="java.util.HashMap">
		UPDATE framework_department
	 	SET
	 		url = REPLACE(url,#{startNodeUrl},#{newUrl}),
	 		update_time = NOW(),
	 		update_user_id = #{updateUserId},
	 		update_user_name = #{updateUserName}
	 	WHERE
	 		url LIKE (${startNodeUrl})
	</update>
</mapper>